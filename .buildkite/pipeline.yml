# Nodes with values to reuse in the pipeline.
common_params:
  plugins: &common_plugins
    - automattic/a8c-ci-toolkit#3.3.0
    - automattic/nvm#0.3.0

# Most of steps use the same agent and environment; we can define them as top-level
agents:
  queue: mac
env:
  IMAGE_ID: xcode-15.2

steps:
  - label: Lint
    key: lint
    command: |
      .buildkite/commands/install-node-dependencies.sh
      echo '--- :eslint: Lint'
      npm run lint
    agents:
      queue: default
    plugins: *common_plugins

  - label: Unit Tests
    key: unit_tests
    command: |
      .buildkite/commands/install-node-dependencies.sh
      echo '--- :npm: Run Unit Tests'
      npm run test
    agents:
      queue: default
    plugins: *common_plugins

  - group: "ðŸ“¦ Build for Mac"
    key: 'dev-mac'
    steps:
      - label: 'ðŸ”¨ Mac Dev Build - {{matrix}}'
        command: |
          .buildkite/commands/prepare-environment.sh

          echo "--- :node: Building Binary"
          .buildkite/commands/install-node-dependencies.sh
          node ./scripts/prepare-dev-build-version.mjs
          npm run make:macos-{{matrix}}

          echo "--- ðŸ“ƒ Notarizing Binary"
          bundle exec fastlane notarize_binary

        plugins: *common_plugins
        artifact_paths:
          - 'out/**/*.app.zip'
        matrix:
          - "universal"
          - "x64"
          - "arm64"
    if: "build.tag !~ /^v[0-9]+/"

  - label: "ðŸ”¨ Windows Dev Build"
    key: "dev-windows"
    command: .buildkite/commands/build-for-windows-dev.ps1
    artifact_paths:
      - 'out\**\studio-setup.exe'
      - 'out\**\studio-update.nupkg'
      - 'out\**\RELEASES'
    agents:
      queue: "windows"
    if: "build.tag !~ /^v[0-9]+/"

  - label: ':rocket: Distribute Dev Builds'
    command: |
      echo "--- :node: Downloading Binaries"
      buildkite-agent artifact download "*.app.zip" .
      buildkite-agent artifact download "*.exe" .

      echo "--- :node: Generating Release Manifest"
      install_npm_packages
      node ./scripts/generate-releases-manifest.mjs

      echo "--- :fastlane: Distributing Dev Builds"
      install_gems
      bundle exec fastlane distribute_dev_build
    agents:
      queue: "mac" #
    depends_on:
      - step: "dev-mac"
      - step: "dev-windows"
    plugins: *common_plugins
    if: "build.branch == 'trunk' && build.tag !~ /^v[0-9]+/"

  - group: "ðŸ“¦ Build for Mac"
    key: 'release-mac'
    steps:
      - label: 'ðŸ”¨ Mac Release Build - {{matrix}}'
        command: |
          .buildkite/commands/prepare-environment.sh

          echo "--- :node: Building Binary"
          .buildkite/commands/install-node-dependencies.sh
          node ./scripts/confirm-tag-matches-version.mjs
          npm run make:macos-{{matrix}}

          echo "--- ðŸ“ƒ Notarizing Binary"
          bundle exec fastlane notarize_binary

        plugins: *common_plugins
        artifact_paths:
          - 'out/**/*.app.zip'
        matrix:
          - "universal"
          - "x64"
          - "arm64"
    if: "build.tag =~ /^v[0-9]+/"

  - label: 'ðŸ”¨ Windows Release Build'
    key: 'release-windows'
    command: .buildkite/commands/build-for-windows-release.ps1
    agents:
      queue: "windows"
    artifact_paths:
      - 'out\**\studio-setup.exe'
      - 'out\**\studio-update.nupkg'
      - 'out\**\RELEASES'
    if: "build.tag =~ /^v[0-9]+/"

  - label: ':rocket: Publish Release Builds'
    command: |
      echo "--- :node: Downloading Binaries"
      buildkite-agent artifact download "*.zip" .
      buildkite-agent artifact download "*.exe" .

      echo "--- :node: Generating Release Manifest"
      install_npm_packages
      node ./scripts/generate-releases-manifest.mjs

      echo "--- :fastlane: Distributing Release Builds"
      install_gems
      bundle exec fastlane distribute_release_build
    agents:
      queue: "mac" # 
    depends_on:
      - step: "release-mac"
      - step: "release-windows"
    plugins: *common_plugins
    if: "build.tag =~ /^v[0-9]+/"
