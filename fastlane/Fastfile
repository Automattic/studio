# frozen_string_literal: true

fastlane_require 'digest'
fastlane_require 'zip'
fastlane_require 'aws-sdk-cloudfront'

UI.user_error!('Please run fastlane via `bundle exec`') unless FastlaneCore::Helper.bundler?

########################################################################
# Constants and Environment Variables
########################################################################
PROJECT_ROOT_FOLDER = File.dirname(File.expand_path(__dir__))
SECRETS_FOLDER = File.join(Dir.home, '.configure', 'studio', 'secrets')
BUILDS_FOLDER = File.join(PROJECT_ROOT_FOLDER, 'out')

APPLE_TEAM_ID = 'PZYM8XX95Q'
APPLE_BUNDLE_IDENTIFIER = 'com.automattic.studio'
APPLE_API_KEY_PATH = File.join(SECRETS_FOLDER, 'app_store_connect_fastlane_api_key.json')

CDN_URL = 'https://cdn.a8c-ci.services'

# Use this instead of getting values from ENV directly
# It will throw an error if the requested value is missing
def get_required_env(key)
  UI.user_error!("Environment variable `#{key}` is not set.") unless ENV.key?(key)
  ENV.fetch(key)
end

before_all do |_lane|
  setup_ci # Fixes weird Keychain bugs
end

desc 'Download the development signing certificates to this machine'
lane :set_up_signing do |_options|
  sync_code_signing(
    platform: 'macos',
    app_identifier: APPLE_BUNDLE_IDENTIFIER,
    team_id: APPLE_TEAM_ID,
    type: 'developer_id',
    storage_mode: 's3',
    s3_bucket: 'a8c-fastlane-match',
    api_key_path: APPLE_API_KEY_PATH,
    readonly: true
  )
end

desc 'Notarize the compiled binary'
lane :notarize_binary do |_options|
  Dir[File.join(BUILDS_FOLDER, '**', 'Studio.app')].each do |path|
    notarize(
      package: path,
      api_key_path: APPLE_API_KEY_PATH
    )
  end
end

desc 'Ship the binary to internal testers'
lane :distribute_dev_build do |_options|
  distribute_builds
end

desc 'Ship release build'
lane :distribute_release_build do |_options|
  builds = distribute_builds(release_tag: get_required_env('BUILDKITE_TAG'))

  slack(
    username: 'CI Bot',
    icon_url: 'https://octodex.github.com/images/jenktocat.jpg',
    message: ":tada: #{release_tag} is now available! :tada:",
    channel: '#dotcom-studio',
    success: true,
    slack_url: get_required_env('SLACK_WEBHOOK'),
    payload: {
      ':studio-app-icon-mac: Release available for': builds.each_value.map { |b| "[#{b[:name]}](#{b[:cdn_url]})" }.join(', ')
    },
    default_payloads: []
  )
end

def distribute_builds(
  commit_hash: last_git_commit[:commit_hash],
  build_number: get_required_env('BUILDKITE_BUILD_NUMBER'),
  release_tag: nil
)
  # If we are distributing a build without a tag, i.e. a development build, we also want to update the latest build reference for distribution.
  update_latest = release_tag.nil?
  suffix = release_tag.nil? ? commit_hash : release_tag
  filename_root = 'studio'
  bucket_folder = 'studio'

  builds = {
    mac_universal: {
      binary_path: File.join(BUILDS_FOLDER, 'Studio-darwin-universal', 'Studio.app.zip'),
      filename_core: 'darwin-universal',
      extension: 'app.zip',
      name: 'Mac Universal'
    },
    x64: {
      binary_path: File.join(BUILDS_FOLDER, 'Studio-darwin-x64', 'Studio.app.zip'),
      filename_core: 'darwin-x64',
      extension: 'app.zip',
      name: 'Mac Intel'
    },
    arm64: {
      binary_path: File.join(BUILDS_FOLDER, 'Studio-darwin-arm64', 'Studio.app.zip'),
      filename_core: 'darwin-arm64',
      extension: 'app.zip',
      name: 'Mac Apple Silicon'
    },
    windows: {
      binary_path: File.join(BUILDS_FOLDER, 'make', 'squirrel.windows', 'x64', 'studio-setup.exe'),
      filename_core: 'win32',
      extension: 'exe',
      name: 'Windows'
    }
  }

  # Add computed fields
  assemble_filename = lambda do |build, filename_suffix|
    "#{filename_root}-#{build[:filename_core]}-#{filename_suffix}.#{build[:extension]}"
  end
  builds.each_value do |build|
    build[:filename] = assemble_filename.call(build, suffix)
    build[:cdn_url] = "#{CDN_URL}/#{bucket_folder}/#{build[:filename]}"
  end


  bucket_name = 'a8c-apps-public-artifacts'

  builds.each_value do |build|
    upload_to_s3(
      bucket: bucket_name,
      key: "#{bucket_folder}/#{build[:filename]}",
      file: build[:binary_path],
      if_exists: :fail,
      auto_prefix: false
    )
  end

  manifest_name = 'release.json'
  upload_to_s3(
    bucket: bucket_name,
    key: "#{bucket_folder}/#{manifest_name}",
    file: File.join(BUILDS_FOLDER, manifest_name),
    if_exists: :replace,
    auto_prefix: false
  )

  cache_paths_to_clear = [
    "/#{bucket_folder}/releases.json"
  ]

  if update_latest
    builds.each_value do |build|
      filename = assemble_filename.call(build, 'latest')
      key = "#{bucket_folder}/#{filename}"

      upload_to_s3(
        bucket: bucket_name,
        key:,
        file: build[:binary_path],
        if_exists: :replace,
        auto_prefix: false
      )

      cache_paths_to_clear.append("/#{key}")
    end
  end

  # Because we distribute via Cloudfront, we need to invalidate the manifest
  # and the latest build (if building for release) after each upload, otherwise
  # it'll be stale.
  clear_cloudfront_cache(
    paths: cache_paths_to_clear,
    commit_hash: "#{commit_hash}-#{build_number}"
  )

  # When publishing a relesea build, copy the file into position to be picked
  # up by the Buildkite agent and saved with the job.
  builds.each_value do |build|
    FileUtils.cp(build[:binary_path], File.join(BUILDS_FOLDER, "#{build[:filename]}-#{suffix}-#{build[:extension]}"))
  end

  buildkite_annotate(
    context: 'cdn-link',
    style: 'info',
    message: "ðŸ”— Build available for #{builds.each_value.map { |build| "[#{build[:name]}](#{build[:cdn_url]})" }.join(', ')}"
  )

  # Return the builds data so callers can use them for further processing or messaging.
  builds
end

def clear_cloudfront_cache(paths:, commit_hash:)
  Aws::CloudFront::Client.new.create_invalidation(
    distribution_id: 'EF4A01YASGPY5',
    invalidation_batch: {
      paths: {
        quantity: paths.length,
        items: paths
      },
      caller_reference: commit_hash
    }
  )
end
